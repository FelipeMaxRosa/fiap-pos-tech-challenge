name: CI
run-name: Fast N Foodious CI
on: [push]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Installing dependencies
        run: npm install

      - name: Install Jest globally (if not already installed)
        run: npm install -g jest
  
      - name: Add node_modules/.bin to PATH
        run: export PATH=./node_modules/.bin:$PATH  # This line adds node_modules/.bin to the PATH
        
      - name: Running unit tests
        run: npm run test
      - name: Running coverage tests
        run: npm run test:cov
      - name: Running check components without unit/e2e tests
        run: npm run test:check

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Cache Node.js dependencies (for e2e-tests)
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Installing dependencies
      #   run: npm install
      - name: Running e2e tests in memory repositories
        run: NODE_ENV=local-mock-repository npm run test:e2e
      - name: Running e2e in mysql server - Build Docker Images for Tests
        run: docker-compose --env-file ./envs/prod.env build
      - name: Running e2e in mysql server - Start Docker Containers
        run: docker-compose --env-file ./envs/prod.env up -d
      - name: Running e2e in mysql server - Wait for MySQL to Accept Connections
        run: docker-compose exec -T mysql sh -c 'while ! mysqladmin ping -hlocalhost --silent; do sleep 1; done'

      # TO-DO - need to check how to implement it properly
      # - name: Running e2e in mysql server - Running Tests
      #   run: docker-compose --env-file ./envs/prod.env exec -T fast-n-foodious sh -c "npm run test:e2e"

  build:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Installing dependencies
        run: npm install
      - name: Building application
        run: npm run build

  deploy-STAGING:
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    needs: build
    env:
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Installing dependencies
        run: npm install

      - name: Deploying application to STAGING
        run: echo "The application has been deployed to STAGING successfully."

  deploy-PRE-RELEASE:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Installing dependencies
        run: npm install

      - name: Deploying application to PRE-RELEASE 
        run: echo "The application has been deployed to PRE-RELEASE successfully."

  deploy-PRODUCTION:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build
    env:
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Installing dependencies
        run: npm install

      - name: Deploying application to PRODUCTION
        run: echo "The application has been deployed to PRODUCTION successfully."
        
