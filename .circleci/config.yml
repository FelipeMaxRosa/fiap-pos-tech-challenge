version: 2.1
jobs:
  run-unit-tests:
    working_directory: ~/fast-n-foodious
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Run Unit Tests
          command: npm install && npm run test

  run-coverage-tests:
    working_directory: ~/fast-n-foodious
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Run Coverage Tests
          command: npm install && npm run test:cov

  run-check-test-impl:
    working_directory: ~/fast-n-foodious
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Verify Components Without Unit/E2E Tests
          command: npm install && npm run test:check

  run-e2e-in-memory:
    working_directory: ~/fast-n-foodious
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Run E2E Tests (With In-Memory Repositories)
          command: npm install && NODE_ENV=local-mock-repository npm run test:e2e

  run-e2e-mysql:
    working_directory: ~/fast-n-foodious
    docker:
      - image: cimg/node:18.16.0
        environment:
          MYSQL_USER: $MYSQL_USER
          MYSQL_PASSWORD: $MYSQL_PASSWORD
          MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
          MYSQL_HOST: '%'
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Start Docker Containers
          command: docker-compose --env-file ./envs/prod.env up -d
      - run:
          name: Wait for MySQL to Accept Connections
          command: |
            docker-compose --env-file ./envs/prod.env exec -T mysql sh -c "until mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD ; do sleep 1; done"
      - run:
          name: Create schema MySQL Schema & Populate Database
          command: |
            docker cp ./scripts/schema/. $(docker-compose ps -q mysql):/docker-entrypoint-initdb.d
            docker-compose --env-file ./envs/prod.env exec -T mysql sh -c "mysql -uroot -p$MYSQL_ROOT_PASSWORD -e 'source /docker-entrypoint-initdb.d/1-init.sql; source /docker-entrypoint-initdb.d/2-populate.sql;'"
      - run:
          name: Run E2E Tests (With TypeORM Repositories - MySQL)
          command: docker-compose --env-file ./envs/prod.env exec -T app sh -c "npm run test:e2e"
      - run:
          name: Stop and Remove Docker Containers
          command: docker-compose --env-file ./envs/prod.env down
  build:
    working_directory: ~/fast-n-foodious
    docker:
     - image: cimg/node:18.16.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - run:
          when: on_success
          name: Build Image & Push It To Registry
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
              docker context create tls-env
              docker buildx create tls-env --use
              docker buildx build --push --platform linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64 --tag $DOCKER_USER/fast-n-foodious:$CIRCLE_BUILD_NUM .
              docker buildx build --push --platform linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64 --tag $DOCKER_USER/fast-n-foodious:latest .
              echo "Docker image pushed successfully!"
            else
              echo "Skipping image push as it's not the main branch."
            fi 
      - run:
          when: on_fail
          name: Build failed
          command: |
            echo "ERROR building the project from branch $CIRCLE_BRANCH"
workflows:
  fast-n-foodious:
    jobs:
      - run-check-test-impl
      - run-unit-tests
      - run-coverage-tests
      - run-e2e-in-memory
      - run-e2e-mysql
      - build:
         requires:
            - run-unit-tests
            - run-coverage-tests
            - run-check-test-impl
            - run-e2e-in-memory
            - run-e2e-mysql